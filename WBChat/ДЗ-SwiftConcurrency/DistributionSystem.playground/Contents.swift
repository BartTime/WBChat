import Foundation
import DistributionSystem_Sources

//–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ—Ç–æ—Ä–æ–π:
//1. –ù–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –º–æ–≥—É—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
//2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
//3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
//4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
//5. –û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤.

// MARK: –ö–ª–∞—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
actor DistributedServer {
    private var clients: [DistributedClient] = []
    private var workItems: [WorkItem] = []
    private var results: [Result] = []
    
    func addClient(_ client: DistributedClient) {
        clients.append(client)
        print("üì° –°–µ—Ä–≤–µ—Ä: –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç: (\(client.name)). –í—Å–µ–≥–æ: \(clients.count)")
    }
    
    func addWorkItem(_ workItem: WorkItem) {
        workItems.append(workItem)
        print("üì¶ –°–µ—Ä–≤–µ—Ä: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (ID: \(workItem.id)). –ü—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä \(workItem.countNumber). –í—Å–µ–≥–æ –∑–∞–¥–∞—á: \(workItems.count)")
    }
    
    func startProcessing() {
        Task {
            while !workItems.isEmpty {
                await distributeWorkItem()
                try? await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á
            }
        }
    }
    
    func getClientStats() async -> [(name: String, completedTasks: Int, averageTime: TimeInterval)] {
        var stats: [(name: String, completedTasks: Int, averageTime: TimeInterval)] = []
        for client in clients {
            let count = await client.completedTasksCount
            let avgTime = await client.averageExecutionTime
            stats.append((name: client.name, completedTasks: count, averageTime: avgTime))
        }
        return stats
    }
    
    private func distributeWorkItem() async {
        guard let workItem = workItems.first else { return }
        
        for client in clients {
            if await !client.isBusy {
                let taskNumber = (workItems.count - workItems.count) + 1
                workItems.removeFirst()
                print("üîÑ –°–µ—Ä–≤–µ—Ä: –ó–∞–¥–∞—á—É ‚Ññ\(workItem.countNumber) —Å ID: \(workItem.id) –≤—ã–ø–æ–ª–Ω—è–µ—Ç \(client.name)")
                Task {
                    do {
                        let result = try await client.processWorkItem(workItem)
                        handleResult(result)
                    } catch {
                        print("‚ùå –°–µ—Ä–≤–µ—Ä: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ID: \(workItem.id) —É –∫–ª–∏–µ–Ω—Ç–∞ \(client.name): \(error)")
                        workItems.append(workItem)
                        print("üîô –°–µ—Ä–≤–µ—Ä: –ó–∞–¥–∞—á–∞ ID: \(workItem.id) –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –æ—á–µ—Ä–µ–¥—å")
                    }
                }
                break
            }
        }
    }
    
    private func handleResult(_ result: Result) {
        results.append(result)
        print("‚úÖ –°–µ—Ä–≤–µ—Ä: –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–¥–∞—á–∏(ID: \(result.workItemId)). –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: \(String(format: "%.2f", result.executionTime)) —Å–µ–∫. –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: \(results.count)")
        Task { await syncResults() }
    }
    
    private func syncResults() async {
        print("üîÑ –°–µ—Ä–≤–µ—Ä: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
        for client in clients {
            await client.sync(results: results)
        }
    }
}

// MARK: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
class Client: DistributedClient {
    let name: String
    private let server: DistributedServer
    private var busy = false
    private var completedTasks = 0
    private var totalExecutionTime: TimeInterval = 0
    
    var isBusy: Bool {
        get async { busy }
    }
    
    var completedTasksCount: Int {
        get async { completedTasks }
    }
    
    var averageExecutionTime: TimeInterval {
        get async {
            guard completedTasks > 0 else { return 0 }
            return totalExecutionTime / Double(completedTasks)
        }
    }
    
    init(name: String, server: DistributedServer) {
        self.name = name
        self.server = server
    }
    
    func connect() async throws {
        await server.addClient(self)
        print("üü¢ \(name): –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è")
    }
    
    func disconnect() async {
        print("üî¥ \(name): –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
    }
    
    func processWorkItem(_ workItem: WorkItem) async throws -> Result {
        busy = true
        print("üì± \(name): –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É \(workItem.countNumber)")
        let startTime = Date()
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç 1 –¥–æ 4 —Å–µ–∫—É–Ω–¥
        try await Task.sleep(nanoseconds: UInt64.random(in: 1_000_000_000...4_000_000_000))
        let executionTime = Date().timeIntervalSince(startTime)
        print("‚úÖ \(name): –ó–∞–∫–æ–Ω—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ \(workItem.countNumber). –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: \(String(format: "%.2f", executionTime)) —Å–µ–∫")
        busy = false
        completedTasks += 1
        totalExecutionTime += executionTime
        return Result(workItemId: workItem.id, result: Data(), executionTime: executionTime)
    }
    
    func sync(results: [Result]) async {
        print("üîÑ \(name): —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–ø–æ–ª–Ω–µ–Ω–æ \(results.count) –∑–∞–¥–∞—á")
    }
}

// MARK:  –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

func runDistributedSystem(taskNumber: Int) async throws {
    print("\nüìä –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏\n")
    
    let server = DistributedServer()
    
    let client1 = Client(name: "–ö–ª–∏–µ–Ω—Ç_‚Ññ1", server: server)
    let client2 = Client(name: "–ö–ª–∏–µ–Ω—Ç_‚Ññ2", server: server)
    let client3 = Client(name: "–ö–ª–∏–µ–Ω—Ç_‚Ññ3", server: server)
    
    print("üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    try await client1.connect()
    try await client2.connect()
    try await client3.connect()
    
    print("\nüì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
    for i in 1...taskNumber {
        await server.addWorkItem(WorkItem(id: UUID(), data: Data(), countNumber: i))
    }
    
    print("\n‚è≥–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...\n")
    await server.startProcessing()
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    try await Task.sleep(nanoseconds: 15_000_000_000)

    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:")
    let stats = await server.getClientStats()
    for stat in stats {
        print("üë§ \(stat.name): –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á - \(stat.completedTasks), —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - \(String(format: "%.2f", stat.averageTime)) —Å–µ–∫")
    }
    
    print("\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await client1.disconnect()
    await client2.disconnect()
    await client3.disconnect()
    print("\n‚öôÔ∏è‚öíÔ∏è –°–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n")
}

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
Task {
    do {
        try await runDistributedSystem(taskNumber: 10)
    } catch {
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: \(error)")
    }
}

